const {ipcRenderer} = require('electron')
let selectDom = null

// eslint-disable-next-line no-unused-vars
var selectPlugin = {

  startSelect: function () {
    document.body.style.cursor = 'crosshair'
    this.addEvent(document.body, 'mouseover', this.mouseOverHandler)
    this.addEvent(document.body, 'mouseout', this.mouseOutHandler)
  },

  stopSelect: function () {
    document.body.style.cursor = 'auto'
    this.removeEvent(document.body, 'mouseover', this.mouseOverHandler)
    this.removeEvent(document.body, 'mouseout', this.mouseOutHandler)
  },

  mouseOverHandler: function (e) {
    e.stopPropagation()
    e.target.style.backgroundColor = 'rgb(160,191,232)'
    selectDom = e.target
  },

  mouseOutHandler: function (e) {
    e.stopPropagation()
    e.target.style.backgroundColor = ''
  },

  addEvent: function (element, eventName, handler) {
    element.addEventListener(eventName, handler, false)
  },

  removeEvent: function (element, eventName, handler) {
    element.removeEventListener(eventName, handler, false)
  },

  select: function () {
    const selector = this.getUniqueSelect(selectDom)
    ipcRenderer.sendToHost(selector)
  },

  getUniqueSelect: function (node) {
    let path
    while (node) {
      let name = node.localName
      if (name) {
        name = name.toLowerCase()
        const parent = node.parentElement
        let reChildrenNode = []
        const childNodes = (parent && parent.childNodes) || []
        for (let i = 0; i < childNodes.length; i++) {
          if (childNodes[i].nodeName.toLowerCase() === name && !/\s/.test(childNodes.nodeValue)) {
            reChildrenNode.push(childNodes[i])
          }
        }
        if (reChildrenNode.length > 1) {
          const index = reChildrenNode.indexOf(node) + 1
          name += ':nth-of-type(' + index + ')'
        }
        path = name + (path ? '>' + path : '')
        node = parent
      }
    }
    return path
  }
}
